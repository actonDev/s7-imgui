((aod.ns (*ns-name* . "") (*features* . "") (*nss* . "") (*ns-require-dynamic* . "") (*ns-load-mode* . "") (ns-make-empty-let . "") (*ns* . "") (ns-create . "") (ns-get-or-create . "") (ns-should-bind-globally? . "") (ns-should-bind-locally? . "") (ns-load . "") (ns-require-alias . "") (ns-require . "") (ns-load-file . "") (ns . "") (with-ns . "") (with-temp-ns . "") (-ns-is-of-subns? . "") (ns-doc . "")) (aod.geom (*ns-name* . "") (*eps* . "") (distance-sq . "") (distance . "") (point-in-circle? . "") (sq . "") (-expand-A-B-C-etc . "") (-fx-intersect . "") (filter-points-in-circle . "") (point-in-segment? . "") (filter-points-in-segment . "") (clip-line-in-circle . "") (filter-empty . "") (clip-lines-in-circle . "") (rad->deg . "") (line-offset . "") (lines-offset . "") (mk-circle . "") (mk-line . "") (repeat-line . "") (repeat-lines . "") (radius-line . "")) (aod.layout (*ns-name* . "") (circular . "Circular layout.
Calls (cb x y :phase [0 .. (N-1)/N] :n [0 .. N]

If the gui flag is passed (and indeed working with computer graphics)
the elements will be drawn clock-wise starting from 12 o'clock. The
theta-offset and clock-wise flags won't have any effect. Let's call it
a known-issue")) (aod.test-all (*ns-name* . "")) (aod.c.imgui (begin . "Begin a window") (begin-maximized . "Begin the maximized window") (end . "Ends a window") (text . "Text") (button . "Button") (checkbox . "Checkbox") (begin-menu-bar . "BeginMenuBar") (end-menu-bar . "EndMenuBar") (begin-main-menu-bar . "BeginMainMenuBar") (end-main-menu-bar . "EndMainMenuBar") (begin-menu . "BeginMenu") (end-menu . "EndMenu") (separator . "Separator") (menu-item . "Menu item. TODO add more args (kbd shortcut, enabled, selected") (same-line . "Puts the next element in the same line as the previous one") (begin-child . "BeginChild") (end-child . "EndChild") (begin-group . "BeginGroup") (end-group . "EndGroup") (dummy . "Dummy - a container (a placeholder for custom drawin, sets the w,h to offset the next element)") (draw-circle . "(cx cy r col &optional segments thickness)") (draw-arc . "(cx cy r a-min a-max col &optional segments thickness)") (draw-circle-filled . "(cx cy r col &optional segments)") (draw-line . "(x1 y1 x2 y2 col &optional thickness)") (draw-text . "(x y text color)") (color32 . "(color32 r g b &optional a) input ranging from 0 to 255Returns a u32 representation of the color 0xRRGGBBAA") (color-edit-3 . "ColorEdit3") (slider-float . "SliderFloat") (slider-int . "(label value min max)
value is a *int pointer (from aod.c.foreign/new-int)") (text-input . "(label *char buffer-size)") (is-item-deactivated-after-edit . "IsItemDeactivatedAfterEdit") (is-item-deactivated . "IsItemDeactivated") (set-item-default-focus . "SetItemDefaultFocus") (is-item-focused . "IsItemFocused") (set-keyboard-focus-here . "SetKeyboardFocusHere (&optional offset)
focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget") (*features* . "")) (aod.imgui.macros (*ns-name* . "") (safe . "") (begin . "") (maximized . "") (child . "") (group . "") (main-menu-bar . "") (menu-bar . "") (menu . "") (menu-item . "") (horizontal . "")) (aod.c.foreign (type-bool . "") (new-bool . "creates a heap allocated bool (c-object)") (type-int . "") (new-int . "creates a heap allocated int (c-object)") (type-float . "") (new-float . "creates a heap allocated float (c-object)") (type-bool[] . "") (new-bool[] . "creates a heap allocated bool[] (c-object)") (type-int[] . "") (new-int[] . "creates a heap allocated int[] (c-object)") (type-float[] . "") (new-float[] . "creates a heap allocated float[] (c-object)") (type-char[] . "") (new-char[] . "creates a heap allocated char[] (c-object)")) (aod.colors (*ns-name* . "") (-triplet-ramp1 . "") (rgb-phase . "") (triplet-phase . "") (rgb-wheel . "") (ryb->rgb . "")) (aod.midi (*ns-name* . "") (c1-note-on . "") (c1-note-off . "") (c1-note-off-2 . "")) (test.partial (*ns-name* . "") (add-double . "") (add1-double . "") (add-double* . "") (add1-double* . "")) (aod.imgui.helpers (*ns-name* . "") (draw-circle . "") (draw-arc . "") (draw-lines . "") (frgb->u32 . "")) (aod.sxs (*ns-name* . "") (arrow-length . "") (factor-arrow-length . "") (factor-clip-radius . "") (-arrow-angles . "") (sxs-radius-line . "") (arrow-lines . "") (-arrow-right . "") (-arrow-left . "") (arrows-right . "") (arrows-left . "") (lines . "(lines circle (phase 0) (clip #t))
Returns a list of the lines to be drawn to paint the sxs logo.

The circle is of the (cx cy r) form.
A line is of the (x1 y1 x2 y2) form.")) (aod.c.colors (ryb->rgb . "Converts RYB to RGB")) (aod.components.sxs-wheel (*ns-name* . "") (mk-sxs-element . "") (new . "") (draw . "") (set-highlight . "")) (aod.test.c.foreign (*ns-name* . "")) (aod.c.midi (note-on? . "(note-on? status data1 data2)") (note-off? . "(note-off? status data1 data2)") (note-number . "(note-number status data1 data2) Returns either the note or -1")))