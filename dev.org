#+PROPERTY: header-args:sh :session *s7-imgui* :var root=(projectile-project-root)
# #+STARTUP: content
* COMMENT quick dev buttons
  #+NAME: buttons
  #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-inc ">")
  #+END_SRC

  #+RESULTS: buttons
  | [>win:build] | [>repl] | [>test] | [>gui-repl] | [>run] | [>build & run] | [>rebuild] | [>clean] | [>build] |

* Linux
  Setting up
  #+BEGIN_SRC sh
meson setup build
  #+END_SRC

** Necessary symlinks
   #+BEGIN_SRC sh
ln -s `readlink -f src/scheme` build/scheme
   #+END_SRC
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh
ln -s `readlink -f ../SDL` subprojects/sdl2
ls -alh subprojects/sdl2 # subprojects/sdl2 -> xxxx/SDL
ln -s `readlink -f ../s7` subprojects/s7
ls -alh subprojects/s7
ln -s `readlink -f ../SDL_net` subprojects/sdl_net
ls -alh subprojects/sdl_net # subprojects/sdl_net -> xxxx/SDL_net
ln -s `readlink -f ../SFML` subprojects/SFML

# file dialog: needed for some examples
ln -s `readlink -f ../nativefiledialog` subprojects/nfd
   #+END_SRC
** TEMP: s7svn
   #+BEGIN_SRC sh

ln -s `readlink -f ../s7` subprojects/s7
rm subprojects/s7
ln -s `readlink -f ../s7svn/trunk` subprojects/s7
ls subprojects/s7
   #+END_SRC
** Building
** Building for release
   Setting up
   #+BEGIN_SRC sh
meson setup build/release -Dbuildtype=release
meson configure build/release # validating the buildtype
ninja -C build/release
   #+END_SRC

   - debug build weights ~7mb
   - release build ~4mb
     zipped ~1.3mb
*** TODO release
    - do not build tests.. duh

** COMMENT Running
   #+NAME: >build & run
   #+BEGIN_SRC sh
ninja -C build && ./build/s7-imgui
   #+END_SRC

   #+NAME: >run
   #+BEGIN_SRC sh
./build/s7-imgui
   #+END_SRC

   #+NAME: >gui-repl
   #+BEGIN_SRC sh
./build/gui_repl
   #+END_SRC

** Running the tests
   #+NAME: >test
   #+BEGIN_SRC sh
#ninja -C build
./build/test/gtest-all
ninja -C build test
   #+END_SRC

** COMMENT Valgrind remove
   #+BEGIN_SRC sh
ninja -C build
valgrind --leak-check=full --show-reachable=yes --suppressions=test/valgrind_gen.supp  ./build/test/gtest-valgrind
./build/test/gtest-valgrind

valgrind --leak-check=full --show-reachable=yes --suppressions=test/s7.supp  ./build/test/gtest-valgrind --gtest_filter="valgrind_gen_supp.*"


valgrind --leak-check=full --show-reachable=yes --error-limit=no --gen-suppressions=all --log-file=test/valgrind_gen_supp.log ./build/test/gtest-valgrind --gtest_filter="valgrind_gen_supp.*"

valgrind --leak-check=full --show-reachable=yes --error-limit=no --gen-suppressions=all --log-file=test/valgrind_gen_supp2.log ./build/test/gtest-valgrind

valgrind --leak-check=full --show-reachable=yes --suppressions=test/valgrind_gen.supp ./build/test/gtest-valgrind

chmod +x test/parse_valgrind_suppressions.sh
./test/parse_valgrind_suppressions.sh < test/valgrind_gen_supp.log
cat ./test/valgrind_gen_supp.log | test/parse_valgrind_suppressions.sh
cat test/valgrind_gen_supp.log


chmod +x test/grindmerge.sh

cat test/valgrind_gen_supp.log | test/grindmerge.sh >test/valgrind_gen.supp
cat test/valgrind_gen_supp2.log | test/grindmerge.sh >test/valgrind_gen2.supp


valgrind --leak-check=full --show-reachable=yes --suppressions=test/s7.supp --suppressions=test/s7.supp ./build/test/valgrind-s7-1
   #+END_SRC

** Valgrind
   #+BEGIN_SRC sh
#valgrind --leak-check=full --show-reachable=yes  ./build/test/valgrind-gen 
valgrind --leak-check=full --show-reachable=yes --error-limit=no --gen-suppressions=all --log-file=test/valgrind_gen.log ./build/test/valgrind-gen

cat test/valgrind_gen.log | test/grindmerge.sh >test/valgrind_gen.supp

# testing
ninja -C build
valgrind --leak-check=full --show-reachable=yes --suppressions=test/s7.supp --suppressions=test/valgrind_gen.supp  ./build/test/gtest-valgrind

   #+END_SRC
** TCP repl
   You can just connect from your terminal to the running instance
   #+BEGIN_SRC sh :session *socket*
netcat localhost 12345
   #+END_SRC

   However, using emacs is the way to go
   #+NAME: >repl
   #+BEGIN_SRC emacs-lisp
(save-selected-window
  (run-scheme "netcat localhost 1234")
  ;; sending something to see if the repl process is alive
  (scheme-send-string "\n"))
   #+END_SRC
* Windows
** Necessary symlinks
   #+BEGIN_SRC sh
cmd
mklink /J build\scheme src\scheme
exit
   #+END_SRC
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh :session *s7-imgui-cmd*
cmd
mklink /J subprojects\sdl2 ..\SDL
# etc..
exit
   #+END_SRC
** Building
   
   Preparting the project, building & some notes
   #+BEGIN_SRC sh :session *s7-imgui-vs-build*
cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64

meson setup build --backend vs
meson compile -C build

# useful commands
meson setup build --reconfigure --backend vs
meson setup build --wipe --backend vs
rm -rf build

# scheme scripts
mklink /J build\scheme src\scheme

   #+END_SRC
** COMMENT buttons
   Just building (runnable src block)
   #+NAME: >win:build
   #+BEGIN_SRC sh :session *s7-imgui-vs-build*
# the -z .. part is to run this command once, from msys2
# once we are into the cmd.exe we should not run this again
[[ -z "$home" ]] && cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
meson compile -C build   
   #+END_SRC

** Testing
   Note: has to be ran in the build/test dir.
   Cause of some paths.. ugh..
   #+BEGIN_SRC sh
cd build/test
./gtest-all
   #+END_SRC
* Bundled examples
** imgui demo
   #+NAME: ex.c:imgui
   #+BEGIN_SRC sh
ninja -C build

./build/examples/example_imgui
   #+END_SRC
** COMMENT audio player
   (owl.wav not there, cannot really bother with this now)
   #+NAME: ex.c:audio_player
   #+BEGIN_SRC sh
ninja -C build
ln -s `readlink -f src/scheme` build/examples/scheme
ln -s `readlink -f examples/owl.wav` build/examples/owl.wav
ln -s `readlink -f examples/audio_player.scm` build/examples/audio_player.scm
./build/examples/ex_audio_player
   #+END_SRC

* Testing

** C++ (gtest)
   Have to be ran under the =build/test= directory (assuming you ran =meson setup build=)
   #+NAME: >test
   #+BEGIN_SRC sh :session *test* :dir "build/test"
./gtest-all
   #+END_SRC

   To run specific tests:
   #+BEGIN_SRC sh :session *test* :dir "build/test"
./gtest-all --gtest_filter=c_primitives.float_arr
   #+END_SRC

** Scheme
   #+BEGIN_SRC sh
build/repl test/scheme/test-all.scm
build/repl test/scheme/test-core.scm
   #+END_SRC

   #+CALL: repl(file="test/scheme/test-all.scm")
   #+CALL: repl(file="test/scheme/test-core.scm")

* Repl
  Normal Repl
  #+NAME: repl
  #+BEGIN_SRC emacs-lisp :var file="test/scheme/test-all.scm" :results silent
(run-scheme (concat (projectile-project-root) "build/repl " file))   
  #+END_SRC

  #+CALL: repl(file="test/scheme/test-all.scm")
  #+CALL: repl(file="test/scheme/test-core.scm")

  #+CALL: repl(file="src/scheme/imgui_scratch.scm")
  #+CALL: repl(file="")

  "GUI" Repl. The C++ code will call =setup= and =draw= functions
  #+NAME: gui-repl
  #+BEGIN_SRC emacs-lisp :var file="src/scheme/main.scm" :results silent
(run-scheme (concat (projectile-project-root) "build/gui_repl " file))   
  #+END_SRC
  #+CALL: gui-repl()
  #+CALL: gui-repl(file="src/scheme/examples/text-input.scm")
  #+CALL: gui-repl(file="src/scheme/examples/text-editor.scm")

** Benchmark
   #+CALL: repl(file="test/scheme/test-benchmark.scm")

** Components
   #+CALL: _build-and-run-scm(file="src/scheme/aod/components/sxs-wheel.scm")

* Generating documentation for the scheme namespaces
  Generating an org-mode file from the generated =ns-doc.el=
  
  First, we have to run the [[file:test/scheme/gen-doc.scm]] (this produces the [[file:docs/ns-doc.el]] )

** Generating the =ns-doc.el= from scheme
   #+NAME: gen-doc
   #+BEGIN_SRC sh :results silent
./build/repl test/scheme/gen-doc.scm
   #+END_SRC

   #+CALL: gen-doc()

** Generating the markdown document
   Generating a markdown document
   #+NAME: gen-ns-doc-md
   #+BEGIN_SRC emacs-lisp :var out="" :wrap SRC org :results silent
(with-temp-buffer
  ;; (org-mode)
  (let ((ns-doc (read (get-file-contents
		       (expand-file-name "docs/ns-doc.el" )))))
    (mapcar (lambda (ns)
	      (beginning-of-line)
	      (insert (format "# `%s`" (car ns)))
	      (newline)
	      ;; the ns documentation
	      (insert (format "%s" (cadr ns)))
	      (newline)
	      ;; going through the functions
	      (mapcar (lambda (fun)
			(print fun)
			;; fun is usually (name . docstring)
			;; but in some weird case it's (name [] docstring)
			;; eg when the name is "new-char[]" what emacs reads is
			;; (new-char [] "the docstring..")
			;; 
			;; could actually solve this also by exporting a string instead of symbol
			;; for the function name
			(let ((fun-name (if (stringp (cdr fun))
					    (car fun)
					  (format "%s%s" (car fun) (cadr fun))
					  ))
			      (fun-docstring (if (stringp (cdr fun))
						 (cdr fun)
					       (cddr fun))))
			  (insert (format "## %s" fun-name))
			  (newline)
			  (insert (format "%s" fun-docstring))
			  (newline)))
		      (cddr ns)))
	    ns-doc)
    (if (string-empty-p out)
	(buffer-string)
      (write-file (expand-file-name out) nil))))
   #+END_SRC

   #+CALL: gen-ns-doc-md(out="docs/ns-doc.md")
  
** COMMENT generating the org-mode document
   Generating the =.org= file from the =ns-doc.el= (the =out= parameter is passed by calling this block from org-babel)
   #+NAME: gen-ns-doc-org
   #+BEGIN_SRC emacs-lisp :var out="" :wrap SRC org :results silent
(with-temp-buffer
  ;; (org-mode)
  (let ((ns-doc (read (get-file-contents
		       (expand-file-name "docs/ns-doc.el" )))))
    (mapcar (lambda (ns)
	      (beginning-of-line)
	      (org-insert-heading)
	      ;; car is the namespace
	      (insert (format "%s" (car ns)))
	      (newline-and-indent)
	      ;; the ns documentation
	      (insert "#+BEGIN_SRC markdown")
	      (newline)
	      (insert (format "%s" (cadr ns)))
	      (newline)
	      (insert "#+END_SRC")
	      ;; going through the functions
	      (mapcar (lambda (fun)
			(newline-and-indent)
			;; car fun: the function name
			;; cadr fun : the docstring
			(insert (format "  - %s" (car fun)))
			(newline-and-indent)
			(insert "#+BEGIN_SRC markdown")
			(newline)
			(insert (format "%s" (cdr fun)))
			(newline)
			(insert "#+END_SRC")
			(newline))
		      (cddr ns)))
	    ns-doc)
    (if (string-empty-p out)
	(buffer-string)
      (write-file (expand-file-name out) nil))))
   #+END_SRC
  
   #+CALL: gen-ns-doc-org(out="docs/ns-doc.org")

* COMMENT Local variables
  Unfortunately the =(org-babel-goto-named-result "buttons")= doesn't do anything
  The cursor, upon opening the file, stays at the beginning

  # Local Variables:
  # eval: (aod.org-babel/eval-named-block "buttons")
  # eval: (org-babel-goto-named-result "buttons")
  # eval: (setq-local org-confirm-babel-evaluate nil)
  # eval: (aod.org-babel/generate-call-buttons)
  # End:  
