#+PROPERTY: header-args :session *s7-imgui* :var root=(projectile-project-root)
* COMMENT quick dev buttons
  #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-exc (rx (or "ex:" "demo:")))
  #+END_SRC

  #+RESULTS:
  | [test] | [build & run] | [build] |

* S7-Imgui
  Fast & iterative developement of GUI applications with =S7 scheme= & =imgui=
* TODO Linux
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh
ln -s `readlink -f ../SDL` subprojects/sdl2
ls -alh subprojects/sdl2 # subprojects/sdl2 -> xxxx/SDL
ln -s `readlink -f ../s7` subprojects/s7
ls -alh subprojects/s7
ln -s `readlink -f ../SDL_net` subprojects/sdl_net
ls -alh subprojects/sdl_net # subprojects/sdl_net -> xxxx/SDL_net
   #+END_SRC
** Building
   Setting up
   #+BEGIN_SRC sh
meson setup build
   #+END_SRC

   Build
   #+NAME: build
   #+BEGIN_SRC sh
ninja -C build
   #+END_SRC

*** Helpful commands
    #+BEGIN_SRC sh
# for the scheme sources
ln -s `readlink -f src/scheme` build/scheme

meson setup --reconfigure build
meson setup --wipe build
rm -rf build
    #+END_SRC
** Running
   #+NAME: build & run
   #+BEGIN_SRC sh
ninja -C build && ./build/s7-imgui
   #+END_SRC

   That solves any problem with pwd
   #+BEGIN_SRC sh :session *s7-in-build*
cd build
./s7-imgui
   #+END_SRC

*** Testing tcp socket
    #+BEGIN_SRC sh :session *socket*
netcat localhost 12345
    #+END_SRC

** Testing
   #+NAME: test
   #+BEGIN_SRC sh
ninja -C build
./build/test/gtest-all
   #+END_SRC
* TODO Windows
  Optional: using an existing =SDL= repo
  =mklink /J subprojects\sdl2 ..\SDL=
** Building
   #+BEGIN_SRC sh
# visual studio command prompts
cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64

meson setup --backend vs build
meson compile -C build

# more commands
meson setup --reconfigure build
meson setup --wipe build
rm -rf build
   #+END_SRC
* Examples
  #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-inc "ex:")
  #+END_SRC

  #+RESULTS:
  | [ex:imgui] |

** imgui demo
   #+NAME: ex:imgui
   #+BEGIN_SRC sh
ninja -C build
./build/examples/example_imgui
   #+END_SRC

** SDL_NET tcp socket
   Yay it's working
   #+BEGIN_SRC sh
ninja -C build
./build/examples/example-sdl-net
   #+END_SRC

   #+BEGIN_SRC sh :session *tcp*
netcat localhost 1234

hi there
   #+END_SRC

** nng
   #+BEGIN_SRC sh
ninja -C build
./build/examples/example-nng 
   #+END_SRC

** DONE s7 repl.scm
   Using SDL for the base path, s7 for repl and optionally start a repl into a remote s7 instance (over socket)
   #+BEGIN_SRC sh
ninja -C build
ln -s `pwd`/examples/scheme build/default/examples/scheme # for eclipse builds
ln -s `pwd`/examples/scheme build/examples/scheme # for emacs/shell builds

# this needs s7.h to work
cp subprojects/s7/s7.h build/examples/
./build/examples/s7-repl

# clean:
rm -r build/examples/*libc_*
   #+END_SRC
*** it's fast!
    #+BEGIN_SRC sh
time echo "(begin (display (+ 1 2 3)) (newline) (exit))" | ./build/examples/s7-repl
    #+END_SRC
** wrapped TCP Server
   Yay it's working
   #+BEGIN_SRC sh
ninja -C build
./build/examples/tcp_server
   #+END_SRC

   #+BEGIN_SRC sh :session *tcp*
netcat localhost 1234

hi there

   #+END_SRC
