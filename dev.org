#+PROPERTY: header-args:sh :session *s7-imgui* :var root=(projectile-project-root)
# #+STARTUP: content
* COMMENT quick dev buttons
  #+NAME: buttons
  #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-inc ">")
  #+END_SRC

  #+RESULTS: buttons
  | [>test] | [>win:build] | [>repl] | [>test] | [>gui-repl] | [>run] | [>build & run] | [>build] |

* Linux
  Setting up
  #+BEGIN_SRC sh
meson setup build
  #+END_SRC

** Necessary symlinks
   #+BEGIN_SRC sh
# ln -s `readlink -f src/scheme` build/scheme
ln -rs src/scheme build/scheme
ln -rs fonts build/fonts
   #+END_SRC
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh
ln -s `readlink -f ../SDL` subprojects/sdl2
ls -alh subprojects/sdl2 # subprojects/sdl2 -> xxxx/SDL
ln -s `readlink -f ../s7` subprojects/s7
ls -alh subprojects/s7
ln -s `readlink -f ../SDL_net` subprojects/sdl_net
ls -alh subprojects/sdl_net # subprojects/sdl_net -> xxxx/SDL_net
ln -s `readlink -f ../SFML` subprojects/SFML

ln -s `readlink -f ../imgui` subprojects/imgui

# file dialog: needed for some examples
ln -s `readlink -f ../nativefiledialog` subprojects/nfd
   #+END_SRC
** COMMENT s7svn
   Testing things directly from s7svn (git-svn clone ..) before they end up in woody's github mirror
   #+BEGIN_SRC sh

ln -s `readlink -f ../s7` subprojects/s7
rm subprojects/s7
ln -s `readlink -f ../s7svn/trunk` subprojects/s7
ls subprojects/s7
   #+END_SRC
** Building
   #+name: >build
   #+BEGIN_SRC sh
ninja -C build
   #+END_SRC
** Building for release
   Setting up
   #+BEGIN_SRC sh
meson setup build/release -Dbuildtype=release
meson configure build/release # validating the buildtype
ninja -C build/release
   #+END_SRC

   - debug build weights ~7mb
   - release build ~4mb
     zipped ~1.3mb
*** TODO release
    - do not build tests.. duh

** Building: cross-build (mingw)
   #+BEGIN_SRC sh
meson setup build-win64 --cross-file mingw_x64.ini

ninja -C build-win64

# helper commands
meson setup --reconfigure build-win64
meson setup --wipe build-win64
# to cleanup/regenerate
rm -rf build-win64
   #+END_SRC

   #+BEGIN_SRC sh
cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll build-win64
cp /usr/lib/gcc/x86_64-w64-mingw32/9.3-posix/libgcc_s_seh-1.dll build-win64
cp /usr/lib/gcc/x86_64-w64-mingw32/9.3-posix/libstdc++-6.dll build-win64
cp build-win64/subprojects/curl/libcm_libcurl.dll build-win64
   #+END_SRC


  #+BEGIN_SRC emacs-lisp :var file="" :results silent
(run-scheme (concat "wine64 " (projectile-project-root) "build-win64/repl.exe " file))
  #+END_SRC

** COMMENT Running
   #+NAME: >build & run
   #+BEGIN_SRC sh
ninja -C build && ./build/s7-imgui
   #+END_SRC

   #+NAME: >run
   #+BEGIN_SRC sh
./build/s7-imgui
   #+END_SRC

   #+NAME: >gui-repl
   #+BEGIN_SRC sh
./build/gui_repl
   #+END_SRC

** Running the tests
   #+NAME: >test
   #+BEGIN_SRC sh
# the tests assume a pwd of of build/test
bash -c "cd build/test && ./gtest-all"
ninja -C build test
   #+END_SRC

** Valgrind
   #+BEGIN_SRC sh
#valgrind --leak-check=full --show-reachable=yes  ./build/test/valgrind-gen 
valgrind --leak-check=full --show-reachable=yes --error-limit=no --gen-suppressions=all --log-file=test/valgrind_gen.log ./build/test/valgrind-gen

cat test/valgrind_gen.log | test/grindmerge.sh >test/valgrind_gen.supp

# testing
ninja -C build
valgrind --leak-check=full --show-reachable=yes --suppressions=test/s7.supp --suppressions=test/valgrind_gen.supp  ./build/test/gtest-valgrind

valgrind --leak-check=full --show-reachable=yes --suppressions=test/s7.supp --suppressions=test/valgrind_gen.supp  ./build/test/gtest-all --gtest_filter="*valgrind*"

   #+END_SRC
** TCP repl
   You can just connect from your terminal to the running instance
   #+BEGIN_SRC sh :session *socket*
netcat localhost 12345
   #+END_SRC

   However, using emacs is the way to go
   #+NAME: >repl
   #+BEGIN_SRC emacs-lisp
(save-selected-window
  (run-scheme "netcat localhost 1234")
  ;; sending something to see if the repl process is alive
  (scheme-send-string "\n"))
   #+END_SRC
* Windows
** Necessary symlinks
   #+BEGIN_SRC sh
cmd
mklink /J build\scheme src\scheme
exit
   #+END_SRC
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh :session *s7-imgui-cmd*
cmd
mklink /J subprojects\sdl2 ..\SDL
# etc..
exit
   #+END_SRC
** Building
   
   Preparting the project, building & some notes
   #+BEGIN_SRC sh :session *s7-imgui-vs-build*
cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64

meson setup build --backend vs
meson compile -C build

# useful commands
meson setup build --reconfigure --backend vs
meson setup build --wipe --backend vs
rm -rf build

# scheme scripts
mklink /J build\scheme src\scheme

   #+END_SRC
** COMMENT buttons
   Just building (runnable src block)
   #+NAME: >win:build
   #+BEGIN_SRC sh :session *s7-imgui-vs-build*
# the -z .. part is to run this command once, from msys2
# once we are into the cmd.exe we should not run this again
[[ -z "$home" ]] && cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
meson compile -C build   
   #+END_SRC

** Testing
   Note: has to be ran in the build/test dir.
   Cause of some paths.. ugh..
   #+BEGIN_SRC sh
cd build/test
./gtest-all
   #+END_SRC
* Bundled examples
** imgui demo
   #+NAME: ex.c:imgui
   #+BEGIN_SRC sh
ninja -C build

./build/examples/example_imgui
   #+END_SRC
** COMMENT audio player
   (owl.wav not there, cannot really bother with this now)
   #+NAME: ex.c:audio_player
   #+BEGIN_SRC sh
ninja -C build
ln -s `readlink -f src/scheme` build/examples/scheme
ln -s `readlink -f examples/owl.wav` build/examples/owl.wav
ln -s `readlink -f examples/audio_player.scm` build/examples/audio_player.scm
./build/examples/ex_audio_player
   #+END_SRC

* Testing

** C++ (gtest)
   Have to be ran under the =build/test= directory (assuming you ran =meson setup build=)
   #+NAME: >test
   #+BEGIN_SRC sh :session *test* :dir "build/test"
./gtest-all
   #+END_SRC

   To run specific tests:
   #+BEGIN_SRC sh :session *test* :dir "build/test"
./gtest-all --gtest_filter=c_primitives.float_arr
   #+END_SRC

** Scheme
   #+BEGIN_SRC sh
build/repl test/scheme/test-all.scm
build/repl test/scheme/test-core.scm
   #+END_SRC

   #+CALL: repl()
   #+CALL: repl(file="test/scheme/test-all.scm")
   #+CALL: repl(file="test/scheme/test-core.scm")
   #+CALL: repl(file="test/scheme/test-benchmark.scm")


   # testing the ns stuff...
   #+CALL: repl(file="src/scheme/test/ns-load-test.scm")
   #+CALL: repl(file="src/scheme/test/ns-load-test2.scm")
   #+CALL: repl(file="src/scheme/test/ns-load-test3.scm")

** COMMENT how fast are all the tests?
   #+BEGIN_SRC sh
time build/repl test/scheme/test-all.scm
# real	0m0.033s
   #+END_SRC

# temp
   #+CALL: repl(file="src/scheme/freesound/core.scm")

* Repl
  Normal Repl
  #+NAME: repl
  #+BEGIN_SRC emacs-lisp :var file="" :results silent
(run-scheme (concat (projectile-project-root) "build/repl " file))   
  #+END_SRC

  #+CALL: repl(file="test/scheme/test-all.scm")
  #+CALL: repl(file="test/scheme/test-core.scm")

  #+CALL: repl(file="src/scheme/imgui_scratch.scm")
  #+CALL: repl()

  "GUI" Repl. The C++ code will call =setup= and =draw= functions
  #+NAME: gui-repl
  #+BEGIN_SRC emacs-lisp :var file="src/scheme/main.scm" :results silent
(run-scheme (concat (projectile-project-root) "build/src/gui_repl_gflw " file))
  #+END_SRC
  #+CALL: gui-repl()
  #+CALL: gui-repl(file="src/scheme/examples/text-input.scm")
  #+CALL: gui-repl(file="src/scheme/examples/text-editor.scm")
  #+CALL: gui-repl(file="src/scheme/examples/window-list.scm")
  #+CALL: build()

** Benchmark
   #+CALL: repl(file="test/scheme/test-benchmark.scm")

** Components
   #+CALL: _build-and-run-scm(file="src/scheme/aod/components/sxs-wheel.scm")

* Generating documentation for the scheme namespaces
  The following command will generate the [[file:docs/ns-doc.md]] file
   #+BEGIN_SRC sh :results silent
./build/repl test/scheme/gen-doc.scm
   #+END_SRC

   #+CALL: repl("test/scheme/gen-doc.scm")

* COMMENT Local variables
  Unfortunately the =(org-babel-goto-named-result "buttons")= doesn't do anything
  The cursor, upon opening the file, stays at the beginning

  # Local Variables:
  # eval: (aod.org-babel/eval-named-block "buttons")
  # eval: (org-babel-goto-named-result "buttons")
  # eval: (setq-local org-confirm-babel-evaluate nil)
  # eval: (aod.org-babel/generate-call-buttons)
  # End:  
