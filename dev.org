#+PROPERTY: header-args:sh :session *s7-imgui* :var root=(projectile-project-root)
# #+STARTUP: content
* COMMENT quick dev buttons
   #+NAME: buttons
   #+BEGIN_SRC emacs-lisp
;; TODO  that not any is.. well wrong
;; (aod.org-babel/generate-named-buttons-inc (rx (and ">" (not (any ">win")))))
(aod.org-babel/generate-named-buttons-inc ">")
   #+END_SRC

   #+RESULTS: buttons
   | [>clean_libc] | [>win:build] | [>repl] | [>test] | [>run] | [>build & run] | [>rebuild] | [>clean] | [>build] |

* S7-Imgui
  Fast & iterative developement of GUI applications with =S7 scheme= & =imgui=
* Linux
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh
ln -s `readlink -f ../SDL` subprojects/sdl2
ls -alh subprojects/sdl2 # subprojects/sdl2 -> xxxx/SDL
ln -s `readlink -f ../s7` subprojects/s7
ls -alh subprojects/s7
ln -s `readlink -f ../SDL_net` subprojects/sdl_net
ls -alh subprojects/sdl_net # subprojects/sdl_net -> xxxx/SDL_net

# file dialog: needed for some examples
ln -s `readlink -f ../nativefiledialog` subprojects/nfd
   #+END_SRC
** Building
   Setting up
   #+BEGIN_SRC sh
meson setup build
   #+END_SRC

   Build
   #+NAME: >build
   #+BEGIN_SRC sh
ninja -C build
   #+END_SRC

   Clean
   #+NAME: >clean
   #+BEGIN_SRC sh
ninja -C build -t clean
   #+END_SRC

   Rebuilding (only our things, not the subprojects)
   Useful to check for warnings etc
   #+NAME: >rebuild
   #+BEGIN_SRC sh
rm -rf build/src
rm -rf build/test
ninja -C build
   #+END_SRC

*** Helpful commands
    #+BEGIN_SRC sh
# for the scheme sources
ln -s `readlink -f src/scheme` build/scheme
# eclipse debug build
ln -s `readlink -f src/scheme` build/meson.debug.linux.x86_64/scheme

meson setup --reconfigure build
meson setup --wipe build
rm -rf build
    #+END_SRC
** Building for release
      Setting up
   #+BEGIN_SRC sh
meson setup build/release -Dbuildtype=release
meson configure build/release # validating the buildtype
ninja -C build/release
   #+END_SRC

   - debug build weights ~7mb
   - release build ~4mb
     zipped ~1.3mb
*** TODO release
    - do not build tests.. duh

** COMMENT Running
   #+NAME: >build & run
   #+BEGIN_SRC sh
ninja -C build && ./build/s7-imgui
   #+END_SRC

   #+NAME: >run
   #+BEGIN_SRC sh
./build/s7-imgui
   #+END_SRC

** Running the tests
   #+NAME: >test
   #+BEGIN_SRC sh
#ninja -C build
#./build/test/gtest-all
ninja -C build test
   #+END_SRC

   To run specific tests:

   #+BEGIN_SRC sh
./build/test/gtest-all --gtest_filter=c_primitives.float_arr
   #+END_SRC

** TCP repl
   You can just connect from your terminal to the running instance
   #+BEGIN_SRC sh :session *socket*
netcat localhost 12345
   #+END_SRC

   However, using emacs is the way to go
  #+NAME: >repl
  #+BEGIN_SRC emacs-lisp
(save-selected-window
  (run-scheme "netcat localhost 1234")
  ;; sending something to see if the repl process is alive
  (scheme-send-string "\n"))
  #+END_SRC
* Windows
** Optional: using existing repositories for subprojects
   #+BEGIN_SRC sh :session *s7-imgui-cmd*
cmd
mklink /J subprojects\sdl2 ..\SDL
# etc..
   #+END_SRC
** Building
   
   Preparting the project, building & some notes
   #+BEGIN_SRC sh :session *s7-imgui-vs-build*
cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64

meson setup build --backend vs
meson compile -C build

# useful commands
meson setup build --reconfigure --backend vs
meson setup --wipe build
rm -rf build

# scheme scripts
mklink /J build\scheme src\scheme
   #+END_SRC
** COMMENT buttons
   Just building (runnable src block)
   #+NAME: >win:build
   #+BEGIN_SRC sh :session *s7-imgui-vs-build*
# the -z .. part is to run this command once, from msys2
# once we are into the cmd.exe we should not run this again
[[ -z "$home" ]] && cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
meson compile -C build   
   #+END_SRC

* COMMENT Temp
** s7: libc
   Getting some scheme files from s7
   Not sure if I can use this on windows though
   #+BEGIN_SRC sh
mkdir src/scheme/s7
cp subprojects/s7/libc.scm src/scheme/s7/libc.scm
cp subprojects/s7/r7rs.scm src/scheme/s7/r7rs.scm
cp subprojects/s7/cload.scm src/scheme/s7/cload.scm
cp subprojects/s7/s7.h src/scheme/s7/
ls src/scheme/s7/
   #+END_SRC

   Clearing out the generated/compile libc

   #+NAME: >clean_libc
   #+BEGIN_SRC sh
rm src/scheme/s7/libc_s7*
   #+END_SRC

* Bundled examples

** COMMENT examples buttons
   #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-inc (rx (or "ex.c:" (regexp ">build$"))))
   #+END_SRC

   #+RESULTS:
   | [ex.c:audio_player] | [ex.c:imgui] | [>build] |

** imgui demo
   #+NAME: ex.c:imgui
   #+BEGIN_SRC sh
ninja -C build

./build/examples/example_imgui
   #+END_SRC
** audio player
   #+NAME: ex.c:audio_player
   #+BEGIN_SRC sh
ninja -C build
ln -s `readlink -f src/scheme` build/examples/scheme
ln -s `readlink -f examples/owl.wav` build/examples/owl.wav
ln -s `readlink -f examples/audio_player.scm` build/examples/audio_player.scm
./build/examples/ex_audio_player
   #+END_SRC

** scheme app examples
   #+BEGIN_SRC emacs-lisp :exports none
(aod.org-babel/generate-named-buttons-inc (rx (or "ex.scm:" (regexp ">build$"))))
   #+END_SRC

   #+RESULTS:
   | [ex.scm:all-screenshots] | [ex.scm:color-wheel] | [ex.scm:maximized] | [ex.scm:shapes] | [ex.scm:menu] | [>build] |

   #+NAME: ex.scm:menu
   #+BEGIN_SRC sh
./build/s7-imgui `pwd`/scheme-examples/menu.scm
   #+END_SRC

   #+NAME: ex.scm:shapes
   #+BEGIN_SRC sh
./build/s7-imgui `pwd`/scheme-examples/shapes.scm
   #+END_SRC

   #+NAME: ex.scm:maximized
   #+BEGIN_SRC sh
./build/s7-imgui `pwd`/scheme-examples/maximized.scm
   #+END_SRC

   #+NAME: ex.scm:color-wheel
   #+BEGIN_SRC sh
./build/s7-imgui `pwd`/scheme-examples/color_wheel.scm
   #+END_SRC

   #+NAME: ex.scm:all-screenshots
   #+BEGIN_SRC sh
rm scheme-examples/*.png
./build/s7-imgui `pwd`/scheme-examples/menu.scm
./build/s7-imgui `pwd`/scheme-examples/shapes.scm
./build/s7-imgui `pwd`/scheme-examples/maximized.scm
./build/s7-imgui `pwd`/scheme-examples/color_wheel.scm
   #+END_SRC
** COMMENT s7 repl.scm
   Using SDL for the base path, s7 for repl and optionally start a repl into a remote s7 instance (over socket)
   #+BEGIN_SRC sh
ninja -C build
ln -s `pwd`/examples/scheme build/default/examples/scheme # for eclipse builds
ln -s `pwd`/examples/scheme build/examples/scheme # for emacs/shell builds

# this needs s7.h to work
cp subprojects/s7/s7.h build/examples/
./build/examples/s7-repl

# clean:
rm -r build/examples/*libc_*
   #+END_SRC
*** it's fast!
    #+BEGIN_SRC sh
time echo "(begin (display (+ 1 2 3)) (newline) (exit))" | ./build/examples/s7-repl
    #+END_SRC

* COMMENT Local variables
  Unfortunately the =(org-babel-goto-named-result "buttons")= doesn't do anything
  The cursor, upon opening the file, stays at the beginning

# Local Variables:
# eval: (aod.org-babel/eval-named-block "buttons")
# eval: (org-babel-goto-named-result "buttons")
# End:  
